(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./documentation/1. tutorials/1.2 addDesignSystem.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function p(e){return(p="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function i(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function c(e,n){return!n||"object"!==p(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,n){return(s=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=c(this,l(n).call(this,e))).layout=null,t}var t,a,p;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&s(e,n)}(n,o.a.Component),t=n,(a=[{key:"render",value:function(){var e=this.props,n=e.components;m(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"add-design-system"}},"Add design system"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Basically, it is just a theme file for your ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-components")," to create a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Context")," that you can use through your whole application."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"1-define-your-design-system"}},"1. Define your design system"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"export const myTheme = {\n  colors: {\n    lightGrey: '#dfe4ea',\n  },\n  borders: ['1px solid', '2px dashed'],\n  space: ['8px'],\n  radii: ['4px'],\n  fontSizes: ['12px'],\n};\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"2-wrap-the-top-level-application-with-this-theme"}},"2. Wrap the top level application with this theme"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"import { ThemeProvider } from 'styled-components';\nimport { myTheme } from './theme';\nimport { App } from './App';\n\n<ThemeProvider theme={myTheme}>\n  <App />\n</ThemeProvider>;\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"3-now-your-generalinput-could-be-better"}},"3. Now your GeneralInput could be better"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript"}},"import { Input } from 'react-oxygen';\n\nconst GeneralInput = ({ validate, errorText }) => {\n  const [input, onInputChange] = useState('');\n  const isCorrectInput = input && validate(text);\n\n  return (\n    <Box direction=\"column\" gap={0}>\n      <Input\n        type=\"text\"\n        padding={0}\n        border={isCorrectInput ? 0 : 1}\n        borderColor={isCorrectInput ? 'lightGrey' : 'red'}\n        borderRadius={0}\n        value={input}\n        onChange={e => {\n          onInputChange(e.currentTarget.value);\n        }}\n      />\n      <Text fontSize={0} color={isCorrectInput ? 'green' : 'red'}>\n        {isCorrectInput ? 'Great, you get it right' : errorText}\n      </Text>\n    </Box>\n  );\n};\n")),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"4-what-happened-here"}},"4. What happened here?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"It's the feature from ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-system"),", basically, 2 cases:"),o.a.createElement(r.MDXTag,{name:"ul",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"for some ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"props")," like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"padding"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"border"),o.a.createElement("br",null),"\neverytime you set a number like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0")," or ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"1"),", it will go to your theme, to look at the according array, for instance, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"padding={0}"),", it will use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"myTheme.space[0]"),", and if this number is not the proper index, it will add ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"px")," and apply it. You can still use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"string")," for those cases which is not been covered in your design system.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ul"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"for some ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"props")," like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"color"),", ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"bg")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"borderColor")," here:",o.a.createElement("br",null),"\nfor instance, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"borderColor={isCorrectInput ? 'lightGrey' : 'red'}"),", it will go find ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"myTheme.colors"),", if you set ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"lightGrey"),", it uses ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"myTheme.colors.lightGrey"),", if there is no such key like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"red"),", it will use the value(",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"red"),") directly."))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"5-thats-basically-all-of-it"}},"5. That's basically all of it."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can have a design system to start."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Or you can just start building your application without learning this, and add a design system when the design is stable."),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"6-one-more-thing-for-typescript-user"}},"6. One more thing for TypeScript user"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you use TypeScript, then you are lucky, we have a predefined ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"interface")," for you to define the theme which follows the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-system")," rule."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"import { IThemeType } from 'react-oxygen';\n\nconst myTheme: IThemeType = {\n  // Now the TypeScript will give you\n  // the auto completion and type checking\n};\n")))}}])&&i(t.prototype,a),p&&i(t,p),n}()}}]);
//# sourceMappingURL=1-tutorials-1-2-add-design-system.30517ad445e8704c218f.js.map