{"version":3,"sources":["webpack:///./documentation/1. tutorials/1.3 whatIsReponsiveType.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"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","file":"static/js/1-tutorials-1-3-what-is-reponsive-type.d4c0e4ef.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"responsive\"}}>{`Responsive`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<BaseBox>`}</MDXTag>{` page, you will see lots of props are `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Reponsive`}</MDXTag>{` type. Basically, they are just a much easier way to write your media queries. It's from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`styled-system`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The below document is just copy from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`style-system`}</MDXTag>{`. :P`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`<Box\n  width={[\n    1,    // 100% below the smallest breakpoint\n    1/2,  // 50% from the next breakpoint and up\n    1/4   // 25% from the next breakpoint and up\n  ]}\n/>\n\n// responsive margin\n<Text m={[ 0, 1, 2 ]} />\n\n// responsive padding\n<Text p={[ 2, 3, 4 ]} />\n\n// responsive font-size\n<Text fontSize={[ 3, 4, 5 ]} />\n`}</MDXTag></MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`99% props in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-oxygen`}</MDXTag>{` is responsive!`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"how-to-setup-breakpoints\"}}>{`How to setup breakpoints`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { ThemeProvider } from 'styled-components';\n\nconst myTheme = {\n  breakpoints: ['40em', '52em', '64em', '80em'],\n};\n\n<ThemeProvider theme={myTheme}>\n  <Box width={[1, 1 / 2, 1 / 4]} />\n</ThemeProvider>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the end, it's just a property named `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`breakpoints`}</MDXTag>{` in your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`styled-components`}</MDXTag>{` theme object.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"use-object-style-to-make-things-more-explict\"}}>{`Use object style to make things more explict`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You may feel use array to represent the value is somewhat implict, you want to know which breakpoint does this value associate. You can.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`import { ThemeProvider } from 'styled-components';\n\nconst myTheme = {\n  breakpoints: {\n    sm: '40em',\n    md: '52em',\n    lg: '64em',\n    xl: '80em',\n  },\n};\n\n<ThemeProvider theme={myTheme}>\n  <Box\n    width={{\n      sm: 1,\n      md: 1 / 2,\n      lg: 1 / 4,\n    }}\n  />\n</ThemeProvider>;\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"which-one-is-recommend\"}}>{`Which one is recommend?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It depends on you, personally, I just use array everywhere. Because through a whole project, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`breakpoints`}</MDXTag>{` settings is the same. So use array is clean and still easy to read because of the consistency.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}