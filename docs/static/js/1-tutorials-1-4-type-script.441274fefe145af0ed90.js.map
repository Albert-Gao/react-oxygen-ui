{"version":3,"sources":["webpack:///./documentation/1. tutorials/1.4 TypeScript.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"07CAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KACDO,OAAS,KAFGN,yPADmBO,IAAMC,kDAKnC,IAAAC,EAC0BP,KAAKH,MAA9BW,EADDD,EACCC,WADDC,EAAAF,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,kBAAvD,iBACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,mEAA6GE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,aAA7G,kDAAuPN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,iBAAvP,UACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMnB,MAAO,CAACoB,UAAY,wBAAjF,yKAO3CP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYX,MAAO,CAACkB,GAAK,6BAAvD,4BACAL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,uEAAiHE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,gBAAjH,oBAAgON,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,cAAhO,mDAA4WN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,gBAA5W,+EAAshBN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,KAAthB,kBAAwnBN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,QAAxnB,QAAmtBN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,SAAntB,SAAgzBN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,SAAhzB,QAA44BN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,UAA54B,KACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMnB,MAAO,CAACoB,UAAY,wBAAjF","file":"static/js/1-tutorials-1-4-type-script.dfe45572.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h2\" components={components} props={{\"id\":\"design-system\"}}>{`Design system`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you use TypeScript, then you are lucky, we have a predefined `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`interface`}</MDXTag>{` for you to define the theme which follows the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`styled-system`}</MDXTag>{` rule.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-typescript\"}}>{`import { IThemeType } from 'react-oxygen';\n\nconst myTheme: IThemeType = {\n  // Now the TypeScript will give you\n  // the auto completion and type checking\n};\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"extend-from-react-oxygen\"}}>{`Extend from React oxygen`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you use JavaScript, you just create your own component based own `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-oxygen`}</MDXTag>{`. But if you use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TypeScript`}</MDXTag>{`, you need to type checking your components. In `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-oxygen`}</MDXTag>{`, every component exposes an interface with the component name add a letter `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`I`}</MDXTag>{`, for instance `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`IBox`}</MDXTag>{` for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Box>`}</MDXTag>{`, and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`IText`}</MDXTag>{` for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Text>`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-typescript\"}}>{`import { Box, IBox } from 'react-oxygen';\n\ninterface IMyBox extends IBox {\n  // my types\n}\n\nconst MyBox: React.FC<IMyBox> = ({ children, ...rest }) => (\n  <Box {...rest}>{children}</Box>\n);\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}