(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./documentation/1. tutorials/1.4 TypeScript.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("./node_modules/react/index.js"),r=t.n(o),a=t("./node_modules/@mdx-js/tag/dist/index.js");function c(e){return(c="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}function m(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,n){return!n||"object"!==c(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,n){return(l=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=i(this,s(n).call(this,e))).layout=null,t}var t,o,c;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&l(e,n)}(n,r.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.components;p(e,["components"]);return r.a.createElement(a.MDXTag,{name:"wrapper",components:n},r.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"design-system"}},"Design system"),r.a.createElement(a.MDXTag,{name:"p",components:n},"If you use TypeScript, then you are lucky, we have a predefined ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"interface")," for you to define the theme which follows the ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-system")," rule."),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"import { IThemeType } from 'react-oxygen';\n\nconst myTheme: IThemeType = {\n  // Now the TypeScript will give you\n  // the auto completion and type checking\n};\n")),r.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"extend-from-react-oxygen"}},"Extend from React oxygen"),r.a.createElement(a.MDXTag,{name:"p",components:n},"If you use JavaScript, you just create your own component based own ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-oxygen"),". But if you use ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TypeScript"),", you need to type checking your components. In ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-oxygen"),", every component exposes an interface with the component name add a letter ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"I"),", for instance ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"IBox")," for ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Box>"),", and ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"IText")," for ",r.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<Text>"),"."),r.a.createElement(a.MDXTag,{name:"pre",components:n},r.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"import { Box, IBox } from 'react-oxygen';\n\ninterface IMyBox extends IBox {\n  // my types\n}\n\nconst MyBox: React.FC<IMyBox> = ({ children, ...rest }) => (\n  <Box {...rest}>{children}</Box>\n);\n")))}}])&&m(t.prototype,o),c&&m(t,c),n}()}}]);
//# sourceMappingURL=1-tutorials-1-4-type-script.441274fefe145af0ed90.js.map